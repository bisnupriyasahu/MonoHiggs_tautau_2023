void etau_analyzer::Loop_nominal(Long64_t maxEvents, int reportEvery, string SampleName)
{
  
  int nTotal;
  nTotal = 0;
  int report_=0;
  int report_test=0;
  double numberOfEvents = 0;
  int nInspected;
  nInspected = 0;
  double nInspected_genWeighted;  
  nInspected_genWeighted = 0.0; 
  bool debug=false;  
  if(debug) cout<<"******** debugging is on ******************"<<endl;
  if (fChain == 0) return;
  std::vector<int> eleCand;        eleCand.clear();
  std::vector<int> tauCand;        tauCand.clear();
  
  TString sample = TString(SampleName);
  
  
  //TH1F* h_cutflow_Htt=new TH1F("cutflow_Htt", "cutflow_Htt", 11, 0, 11); h_cutflow_Htt->Sumw2();
  
  Long64_t nentries = fChain->GetEntries();
  if ( is_MC==true ) std::cout<<".... MC file ..... "<<std::endl;
  else  std::cout<<".... DATA file ..... "<<std::endl;

  std::cout<<"Coming in: "<<std::endl;
  std::cout<<"nentries:"<<nentries<<std::endl;
  //Look at up to maxEvents events, or all if maxEvents == -1.
  Long64_t nentriesToCheck = nentries;
  if (maxEvents != -1LL && nentries > maxEvents)
    nentriesToCheck = maxEvents;
  nTotal = nentriesToCheck;
  Long64_t nbytes = 0, nb = 0;
   
  std::cout<<"Running over "<<nTotal<<" events."<<std::endl;
   
  for (Long64_t jentry=0; jentry<nentriesToCheck;jentry++)
    {
      eleCand.clear();
      tauCand.clear();
       
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      double inspected_event_weight = 1.0; 
      if(is_MC)	 fabs(genWeight) > 0.0 ? inspected_event_weight *= genWeight/fabs(genWeight) : inspected_event_weight = 0.0;
      nInspected_genWeighted += inspected_event_weight;  
      nInspected += 1; 
      double event_weight=1.0;
      double weight=1.0;
      double applySf=1.0;
       
      double pileup_sf = 1.0;
      bool passSingleTriggerPaths=false;
      bool passCrossTrigger=false;
      int report_i=0;
      bool Ztt_selector=false;

      numberOfEvents+=weight;
      if(is_MC) weight=inspected_event_weight;
      else weight=1.0;
      if(is_MC)
	pileup_sf = h_pileup->GetBinContent(h_pileup->GetXaxis()->FindBin(puTrue->at(0)));
      weight = weight*pileup_sf;
      if(is_MC)
	weight=weight*prefiringweight;
      if( isGoodVtx==false ) continue;
       

       
      if( ( (HLTEleMuX>>3&1 == 1 )   //HLT_Ele27_WPTight_Gsf_v (HLTEleMuX>>3&1 == 1 )
	    || (HLTEleMuX>>61&1 == 1)  //HLT_Ele32_WPTight_Gsf_v
	    || (HLTEleMuX>>5&1 == 1)   //HLT_Ele35_WPTight_Gsf_v
	    ))
	passSingleTriggerPaths=true;  //
       
      if( ( HLTTau>>1&1 == 1 ) )      //HLT_Ele24_eta2p1_WPTight_Gsf_LooseChargedIsoPFTau30_eta2p1_CrossL1
	passCrossTrigger=true;
       
      /////
      if(debug)cout<<"entry # : "<<jentry<<endl;
       
      if(debug)cout<<"reco selections begin"<<endl;
      eleCand.clear();  tauCand.clear();
      ////// reco selection begin
      if(debug)cout<<"signal region DY->ll -  isolated begin"<<endl;
      ////// DY Z-> ll signal region -  isolated begin
      bool dy_ll_genmatching=false;
      //dy_ll_genmatching=true;

      if(!is_MC)
	event_weight=1.0;
      else
	event_weight=weight;
      if(metFilters==0 )
	{
	  if(debug)cout<<"metfilters selected"<<endl;
	  if(is_MC) fabs(genWeight) > 0.0 ? event_weight *= genWeight/fabs(genWeight) : event_weight = 0;
	  nMETFiltersPassed_dyll+=event_weight;
	  //makeTestPlot("a_dyll", 0,0,0,event_weight);
	  if(debug)cout<<"genweight applied"<<endl;
	  if(   passSingleTriggerPaths || passCrossTrigger )
	    {
	      nSingleTrgPassed_dyll+=event_weight;
	      if(debug)cout<<"trigger selected"<<endl;
	      //makeTestPlot("b_dyll", 0,0,0,event_weight);
	      eleCand = getEleCand(25.0,2.1);  ///// ele selected
	      if( eleCand.size() >0 ) 
		{ 
		  nGoodMuonPassed_dyll+=event_weight;
		  if(debug)cout<<"this worked Line 443"<<endl;
		  //makeTestPlot("c_dyll", 0,0,0,event_weight);
		   
		  tauCand = getTauCand(30,2.3);
		  if( tauCand.size()>0  ) 
		    {
		      nGoodTauPassed_dyll+=event_weight;
		      if(debug)cout<<"this worked Line 424"<<endl;
		      //makeTestPlot("d_dyll", 0,0,0,event_weight);
		       
		      setMyEleTau(eleCand[0], tauCand[0]); // from here we can use my_eleP4, my_tauP4, my_metP4, etc
		      
		      if( passDiElectronVeto(EleIndex)==true 
			  && eVetoZTTp001dxyz(EleIndex, TauIndex)
			  && mVetoZTTp001dxyz(EleIndex, TauIndex)
			  ) Ztt_selector=true;
		      else Ztt_selector=false;
		      
		      if ( TriggerSelection(my_eleP4, my_tauP4) )
			{
			  if(Ztt_selector) 
			    {
			      if ( eleCharge->at(EleIndex) * tau_Charge->at(TauIndex) < 0  
				   &&  (if_DY_Genmatching(EleIndex, TauIndex)==1 || if_DY_Genmatching(EleIndex, TauIndex)==2)  )
				{
				  nGoodMuTauPassed_dyll+=event_weight;
				  //makeTestPlot("e_dyll", 0,0,0,event_weight);
			       
				  if ( MatchTriggerFilter(EleIndex, TauIndex) )
				    {
			       
				      if(debug)cout<<"this worked Line 314, SR opp charge passed"<<endl;
				  
				      applySf=1.0;
				      if(is_MC)
					applySf=  getScaleFactors( my_eleP4.Pt(),
								   my_tauP4.Pt(),
								   eleSCEta->at(EleIndex),
								   //my_eleP4.Eta(),
								   my_tauP4.Eta(),
								   tau_DecayMode->at(TauIndex),
								   myGenMaching(TauIndex),
								   false  /// this is set to true for fake bakground
								   );
				   
				      if(debug)cout<<__LINE__<<" sf : "<< applySf <<endl;
				      event_weight = event_weight * applySf;
				   
				      //makeTestPlot("f_dyll", 0,0,0,event_weight);
				      if( thirdLeptonVeto(EleIndex , TauIndex)  )
					{
					  nPassedThirdLepVeto_dyll+=event_weight;
					  //makeTestPlot("g_dyll", 0,0,0,event_weight);
					  //bool pbjv = (bJet_medium(EleIndex, TauIndex).size()==0) && (bJet_loose(EleIndex, TauIndex).size()<2);
					  if( pass_bjet_veto )
					    {
					  
					      nPassedBjetVeto_dyll+=event_weight;
					      //makeTestPlot("h_dyll", 0,0,0,event_weight);
					      double deltaR =  my_eleP4.DeltaR(my_tauP4);
					      if(deltaR > 0.5 )
						{
						  nDeltaRPassed_dyll+=event_weight;
						  if(is_MC==false)event_weight=1.0;
						  //makeTestPlot("i_dyll", 0,0,0,event_weight);
						  if(debug)cout<<"this worked Line 374"<<endl;
						  fillHist("5_dyll",  EleIndex, TauIndex, false, event_weight);
						  
						  double mT_eleMet = TMass_F( my_eleP4.Pt(), my_eleP4.Phi(),
									      my_metP4.Pt(), my_metP4.Phi() );
						  if( mT_eleMet < 50 )
						    {
						      fillHist("6_dyll", EleIndex, TauIndex, false, event_weight);
						      //makeTestPlot("j_dyll", 0,0,0,event_weight);
						    }
						  //higgs pt > 65,  visible mass < 125, met > 105
						  double mvis=(my_eleP4+my_tauP4).M();
						  double higgsPt = pTvecsum_F(my_eleP4, my_tauP4, my_metP4);
						  if(higgsPt > 65)
						    {
						      fillHist("7_dyll", EleIndex, TauIndex, false, event_weight);
						      if(mvis < 125)
							{
							  fillHist("8_dyll", EleIndex, TauIndex, false, event_weight);
							  if(my_metP4.Pt() > 105)
							    {
							      fillHist("9_dyll", EleIndex, TauIndex, false, event_weight);
							    }
							}

						    }

						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	}
      
      if(debug)cout<<"signal region -  isolated begin L523"<<endl;       
       
      Ztt_selector=false;
      ////// signal region -  isolated begin
      if(is_MC)
	event_weight=weight;
      else
	event_weight=1.0;
      eleCand.clear();  tauCand.clear();
	   
      if(metFilters==0)
	{
	  if(debug)cout<<"metfilters selected"<<endl;
	  if (is_MC) fabs(genWeight) > 0.0 ? event_weight *= genWeight/fabs(genWeight) : event_weight = 0;
	  nMETFiltersPassed+=event_weight;
	  //makeTestPlot("a", 0,0,0,event_weight);
	  if(debug)cout<<"genweight applied"<<endl;
	  if( passSingleTriggerPaths || passCrossTrigger  )
	    {
	      nSingleTrgPassed+=event_weight;
	      if(debug)cout<<"trigger selected"<<endl;
	      //makeTestPlot("b", 0,0,0,event_weight);
	      eleCand = getEleCand(25.0,2.1);  ///// ele selected 
	      if( eleCand.size() >0 ) 
		{ 
		  nGoodMuonPassed+=event_weight;
		  if(debug)cout<<"this worked Line 526"<<endl;
		       
		  //makeTestPlot("c", 0,0,0,event_weight);
		  tauCand = getTauCand(30.0,2.3);
		  if( tauCand.size() >0 )
		    {
		      nGoodTauPassed+=event_weight;
			   
		      setMyEleTau(eleCand[0], tauCand[0]);
		       
		      //makeTestPlot("d", 0,0,0,event_weight);
			   
		      if( passDiElectronVeto(EleIndex)==true
			  && (eVetoZTTp001dxyz(EleIndex, TauIndex))
			  && (mVetoZTTp001dxyz(EleIndex, TauIndex))
			  ) Ztt_selector=true;
		      else Ztt_selector=false;
			   
			   
		      if ( TriggerSelection(my_eleP4, my_tauP4) )
                        {
			  if(Ztt_selector) 
			    {
			   		   
			      if (  eleCharge->at(EleIndex) * tau_Charge->at(TauIndex) < 0 
				    && (if_DY_Genmatching(EleIndex, TauIndex)==1 ||  if_DY_Genmatching(EleIndex, TauIndex)==3) ) 
				{
				  nGoodMuTauPassed+=event_weight;
			       
				  if(debug)cout<<"this worked Line 538"<<endl;
			       
				  //makeTestPlot("e", 0,0,0,event_weight);
				  if ( MatchTriggerFilter(EleIndex, TauIndex) )
				    {
				      if(debug)cout<<"this worked Line 534"<<endl;
				      applySf=1.0;
				      if(is_MC)
					applySf=  getScaleFactors( my_eleP4.Pt(),
								   my_tauP4.Pt(),
								   eleSCEta->at(EleIndex),
								   //my_eleP4.Eta(),
								   my_tauP4.Eta(),
								   tau_DecayMode->at(TauIndex),
								   myGenMaching(TauIndex),
								   false  /// this is set to true for fake bakground
								   );
				  
				      if(debug)cout<<__LINE__<<" sf : "<< applySf <<endl;
				      event_weight = event_weight * applySf;
				      //makeTestPlot("f", 0,0,0,event_weight);
				      if( thirdLeptonVeto(EleIndex , TauIndex)  )
					{
					  nPassedThirdLepVeto+=event_weight;
					  //makeTestPlot("g", 0,0,0,event_weight);
					  if( pass_bjet_veto )
					    {
					      nPassedBjetVeto+=event_weight;
					      //makeTestPlot("h", 0,0,0,event_weight);
					      //if(tau_DecayMode->at(TauIndex)==5 || tau_DecayMode->at(TauIndex)==6) continue;
					  
					      double deltaR = my_eleP4.DeltaR(my_tauP4);
					      if(deltaR > 0.5 )
						{
						  nDeltaRPassed+=event_weight;
						  if(is_MC==false)event_weight=1.0;
						  if(debug)cout<<"this worked Line 558"<<endl;
						  fillHist("5", EleIndex, TauIndex, false, event_weight);
						  
						  double mT_eleMet = TMass_F( my_eleP4.Pt(), my_eleP4.Phi(),
									      my_metP4.Pt(), my_metP4.Phi() );
						  if( mT_eleMet < 50 )
						    {
						      fillHist("6", EleIndex, TauIndex, false, event_weight);
						      //makeTestPlot("j", 0,0,0,event_weight);
						    }
						  //higgs pt > 65,  visible mass < 125, met > 105
						  double mvis=(my_eleP4+my_tauP4).M();
						  double higgsPt = pTvecsum_F(my_eleP4, my_tauP4, my_metP4);
						  if(higgsPt > 65)
						    {
						      fillHist("7", EleIndex, TauIndex, false, event_weight);
						      if(mvis < 125)
							{
							  fillHist("8", EleIndex, TauIndex, false, event_weight);
							  if(my_metP4.Pt() > 105)
							    {
							      ////printtabSeparated("check pts before ", my_eleP4.Pt(), my_tauP4.Pt(), my_metP4.Pt());
							      fillHist("9", EleIndex, TauIndex, false, event_weight);
							    }
							}

						    }
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	}
      //////// signal region end
      if(debug)cout<<"fake background region - antiisolated begin 625"<<endl;
      ///// fake background region - antiisolated begin
      if(is_MC)
	event_weight=weight;
      else
	event_weight=1.0;
      eleCand.clear(); tauCand.clear();
      if(metFilters==0)
	{
	  if (is_MC)fabs(genWeight) > 0.0 ? event_weight *= genWeight/fabs(genWeight) : event_weight = 0;
	  nMETFiltersPassed_fr+=event_weight;
	  //makeTestPlot("a_fr", 0,0,0,event_weight);
	  if(  passSingleTriggerPaths || passCrossTrigger  )
	    {
	      nSingleTrgPassed_fr+=event_weight;
	      if(debug)cout<<"trigger selected line 636"<<endl;
	      //makeTestPlot("b_fr", 0,0,0,event_weight);
	      eleCand = getEleCand(25.0,2.1);  ///// ele selected 
	      if( eleCand.size() >0 ) 
		{ 
		  nGoodMuonPassed_fr+=event_weight;
		  //makeTestPlot("c_fr", 0,0,0,event_weight);
		  if(debug)cout<<"this worked Line 641"<<endl;
		  tauCand = getAISRTauCand(30,2.3);
		  if( tauCand.size()>0 ) 
		    {
		      nGoodTauPassed_fr+=event_weight;
		      //makeTestPlot("d_fr", 0,0,0,event_weight);

		      setMyEleTau(eleCand[0], tauCand[0]); 
		      //event_weight = event_weight* getFR(TauIndex);
		      double mt=TMass_F(my_eleP4.Pt(),my_eleP4.Phi()
					,my_metP4.Pt(), my_metP4.Phi());
		      double mvis=(my_eleP4+my_tauP4).M();
		      double higgsPt = pTvecsum_F(my_eleP4, my_tauP4, my_metP4);
		      double frac_tt=0.01; double frac_qcd=0.24; double frac_w=0.75; 
		      int category=eventCategory(EleIndex , TauIndex, higgsPt) ;
		      getFractions(category, mvis, frac_qcd, frac_w, frac_tt); /// this assigns right values for qcd, w and tt fractions
		      
		      bool xtrg = false;
		      if( passCrossTrigger && my_eleP4.Pt()<28.0) xtrg=true;
		      else if ( my_eleP4.Pt()>28.0) xtrg=false;
		      double newFF = FF_weights_withlpt.get_ff( my_tauP4.Pt(), mt, mvis
								, 0 , my_eleP4.Pt(), my_metP4.Pt()
								, my_njets, xtrg
								, frac_tt, frac_qcd, frac_w
								, TString(" "));
				      
		      
		      event_weight = event_weight*newFF;
		      
		      if( passDiElectronVeto(EleIndex)==true
			  && (eVetoZTTp001dxyz(EleIndex, TauIndex))
			  && (mVetoZTTp001dxyz(EleIndex, TauIndex))
			  ) Ztt_selector=true;
		      else Ztt_selector=false;
		      
		      if ( TriggerSelection(my_eleP4, my_tauP4) )
                        {
			  if(Ztt_selector) 
			    {
			      
			      if (  eleCharge->at(EleIndex) * tau_Charge->at(TauIndex) < 0 ) 
				{
				  nGoodMuTauPassed_fr+=event_weight;
				  //makeTestPlot("e_fr", 0,0,0,event_weight);
				  if ( MatchTriggerFilter(EleIndex, TauIndex) )
				    {
				      
				      applySf=1.0;
				      if(is_MC)
					applySf=  getScaleFactors( my_eleP4.Pt(),
								   my_tauP4.Pt(),
								   eleSCEta->at(EleIndex),
								   //my_eleP4.Eta(),
								   my_tauP4.Eta(),
								   tau_DecayMode->at(TauIndex),
								   myGenMaching(TauIndex),
								   true  /// this is set to true for fake bakground
								   );
				  
				      event_weight = event_weight * applySf;
				      
				      if(debug)cout<<__LINE__<<" sf : "<< applySf <<endl;
				      //makeTestPlot("f_fr", 0,0,0,event_weight);
				      if( thirdLeptonVeto(EleIndex , TauIndex) )
					{
					  nPassedThirdLepVeto_fr+=event_weight;
					  //makeTestPlot("g_fr", 0,0,0,event_weight);
					  if( pass_bjet_veto )
					    {
					      nPassedBjetVeto_fr+=event_weight;
					      //makeTestPlot("h_fr", 0,0,0,event_weight);
					      //if(tau_DecayMode->at(TauIndex)==5 || tau_DecayMode->at(TauIndex)==6) continue;
					   
					      double deltaR = my_eleP4.DeltaR(my_tauP4);
					      if(deltaR > 0.5 )
						{
						  nDeltaRPassed_fr+=event_weight;
						  //makeTestPlot("i_fr", 0,0,0,event_weight);
						  if(debug)cout<<"this worked Line 442"<<endl;
						  fillHist("5_fr", EleIndex, TauIndex, true, event_weight);
						  double mT_eleMet = TMass_F( my_eleP4.Pt(), my_eleP4.Phi(),
									      my_metP4.Pt(), my_metP4.Phi() );
						  if( mT_eleMet < 50 )
						    {
						      fillHist("6_fr", EleIndex, TauIndex, true, event_weight);
						      //makeTestPlot("j_fr", 0,0,0,event_weight);
						    }			 
						  //higgs pt > 65,  visible mass < 125, met > 105
						  double mvis=(my_eleP4+my_tauP4).M();
						  double higgsPt = pTvecsum_F(my_eleP4, my_tauP4, my_metP4);
						  if(higgsPt > 65)
						    {
						      fillHist("7_fr", EleIndex, TauIndex, false, event_weight);
						      if(mvis < 125)
							{
							  fillHist("8_fr", EleIndex, TauIndex, false, event_weight);
							  if(my_metP4.Pt() > 105)
							    {
							      fillHist("9_fr", EleIndex, TauIndex, true , event_weight);
							    }
							}

						    }
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	}
      ////// fake rate anti isolated region end
      report_test = nentriesToCheck/20;
      while (report_test>10)
	{
	  report_test=report_test/10;
	  report_i++;
	}
      if(nentriesToCheck>20)
	reportEvery = report_test*pow(10,report_i);
      else 
	reportEvery = 1;
      if (jentry%reportEvery == 0) 
	{
	  std::cout<<"Finished entry "<<jentry<<"/"<<(nentriesToCheck-1)<<std::endl;
	}
    }
   
  std::cout.setf( std::ios::fixed, std:: ios::floatfield );
  if((nentriesToCheck-1)%reportEvery != 0)
    std::cout<<"Finished entry "<<(nentriesToCheck-1)<<"/"<<(nentriesToCheck-1)<<std::endl;
  // sw.Stop();
  std::cout<<"All events checked."<<std::endl;
  std::cout<<"*******************************************"<<std::endl;
  std::cout<<"******************Jithin's original*************************"<<std::endl;
  std::cout<<std::setw(20) <<std::right <<"Initial entries "<<numberOfEvents<<std::endl;
  std::cout<<std::setw(20) <<std::right <<"Passing smikking "<<nPassedSkimmed<<std::endl;
  std::cout<<std::setw(20) <<std::right <<"Inspected genWeightd "<<nInspected_genWeighted<<std::setw(10) <<std::right << "   % change= "<<(numberOfEvents-nInspected_genWeighted)*100/numberOfEvents<<std::endl;
  std::cout<<std::setw(20) <<std::right <<"METFiltersPassed "<<nMETFiltersPassed<<std::setw(10) <<std::right << "   % change= "<<(nInspected_genWeighted-nMETFiltersPassed)*100/nInspected_genWeighted<<std::endl;

  std::cout<<std::setw(20) <<std::right <<"SingleTrgPassed "<<nSingleTrgPassed<<std::setw(10) <<std::right << "   % change= "<<(nMETFiltersPassed-nSingleTrgPassed)*100/nMETFiltersPassed<<std::endl;

  std::cout<<std::setw(20) <<std::right <<"GoodMuonPassed "<<nGoodMuonPassed<<std::setw(10) <<std::right << "   % change= "<<(nSingleTrgPassed-nGoodMuonPassed)*100/nSingleTrgPassed<<std::endl;
  std::cout<<std::setw(20) <<std::right <<"GoodTauPassed "<<nGoodTauPassed<<std::setw(10) <<std::right << "   % change= "<<(nGoodMuonPassed-nGoodTauPassed)*100/nGoodMuonPassed<<std::endl;
  //   std::cout<<std::setw(20) <<std::right <<"TauIsoPassed "<<nTauIsoPassed<<std::setw(10) <<std::right << "   % change= "<<(nGoodTauPassed-nTauIsoPassed)*100/nGoodTauPassed<<std::endl;
  //std::cout<<std::setw(20) <<std::right <<"TauDecayModePassed "<<nTauDecayModePassed<<std::setw(10) <<std::right << "   % change= "<<(nTauIsoPassed-nTauDecayModePassed)*100/nTauIsoPassed<<std::endl;

  std::cout<<std::setw(20) <<std::right <<"opp charge "<<nGoodMuTauPassed<<std::setw(10) <<std::right << "   % change= "<<(nGoodTauPassed-nGoodMuTauPassed)*100/nGoodTauPassed<<std::endl;

   
  std::cout<<std::setw(20) <<std::right <<"PassedThirdLepVeto "<<nPassedThirdLepVeto<<std::setw(10) <<std::right << "   % change= "<<(nGoodMuTauPassed-nPassedThirdLepVeto)*100/nGoodMuTauPassed<<std::endl;
  std::cout<<std::setw(20) <<std::right <<"PassedBjetVeto "<<nPassedBjetVeto<<std::setw(10) <<std::right << "   % change= "<<(nPassedThirdLepVeto-nPassedBjetVeto)*100/nPassedThirdLepVeto<<std::endl;
  std::cout<<std::setw(20) <<std::right <<"DeltaRPassed "<<nDeltaRPassed<<std::setw(10) <<std::right << "   % change= "<<(nPassedBjetVeto-nDeltaRPassed)*100/nPassedBjetVeto<<std::endl;


  std::cout<<std::setw(20) <<std::right <<"Total change :"<<(numberOfEvents-nDeltaRPassed)*100/numberOfEvents<<std::endl;
  std::cout<<"*******************************************"<<std::endl;
  std::cout<<"*******************************************"<<std::endl;
  std::cout<<std::setw(20) <<std::right <<"Number of events inspected: " << nInspected <<std::endl;
  std::cout<<std::setw(20) <<std::right << "Number of events inspected (minus negative gen. weights): " << nInspected_genWeighted << std::endl; 


  h_cutflow_n->SetBinContent(1,nInspected_genWeighted );
  h_cutflow_n->SetBinContent(2, nSingleTrgPassed);
  h_cutflow_n->SetBinContent(3, nGoodMuonPassed);
  h_cutflow_n->SetBinContent(4, nGoodTauPassed);
  h_cutflow_n->SetBinContent(5, nGoodMuTauPassed);
  h_cutflow_n->SetBinContent(6, nPassedThirdLepVeto);
  h_cutflow_n->SetBinContent(7, nPassedBjetVeto);
  h_cutflow_n->SetBinContent(8, nDeltaRPassed);
   
  h_cutflow_n_fr->SetBinContent(1,nInspected_genWeighted );
  h_cutflow_n_fr->SetBinContent(2, nSingleTrgPassed_fr);
  h_cutflow_n_fr->SetBinContent(3, nGoodMuonPassed_fr);
  h_cutflow_n_fr->SetBinContent(4, nGoodTauPassed_fr);
  h_cutflow_n_fr->SetBinContent(5, nGoodMuTauPassed_fr);
  h_cutflow_n_fr->SetBinContent(6, nPassedThirdLepVeto_fr);
  h_cutflow_n_fr->SetBinContent(7, nPassedBjetVeto_fr);
  h_cutflow_n_fr->SetBinContent(8, nDeltaRPassed_fr);
   
  /// dy Z->ll
  h_cutflow_n_dyll->SetBinContent(1,nInspected_genWeighted );
  h_cutflow_n_dyll->SetBinContent(2, nSingleTrgPassed_dyll);
  h_cutflow_n_dyll->SetBinContent(3, nGoodMuonPassed_dyll);
  h_cutflow_n_dyll->SetBinContent(4, nGoodTauPassed_dyll);
  h_cutflow_n_dyll->SetBinContent(5, nGoodMuTauPassed_dyll);
  h_cutflow_n_dyll->SetBinContent(6, nPassedThirdLepVeto_dyll);
  h_cutflow_n_dyll->SetBinContent(7, nPassedBjetVeto_dyll);
  h_cutflow_n_dyll->SetBinContent(8, nDeltaRPassed_dyll);
   
  ///

  // fileName->cd();
  // map<string, TH1F*>::const_iterator iMap1 = myMap1->begin();
  // map<string, TH1F*>::const_iterator jMap1 = myMap1->end();
  // for (; iMap1 != jMap1; ++iMap1)
  //   nplot1(iMap1->first)->Write();
}
